name: Build Kernel

on:
  workflow_dispatch:
    inputs:
      KERNEL_NAME:
        description: 'Kernel/zip base name'
        required: true
        default: 'perf'
      CONFIG_FILE:
        description: 'Config file (spaceâ€‘separated if multiple)'
        required: true
        default: 'vendor/avalon_defconfig'
      TOOLCHAIN_URL:
        description: 'Toolchain repo URL (with branch if needed)'
        required: true
        default: 'https://gitlab.com/dogpoopy/clang-r522817.git -b main'
      ANYKERNEL:
        description: 'AnyKernel3 repo URL (with branch if needed)'
        required: true
        default: 'https://github.com/aosp-realm/AnyKernel3.git -b master'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: write-all
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}

    steps:
      - name: Checkout this repo
        uses: actions/checkout@v3

      
      
          
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential bc gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi \
            libssl-dev libfl-dev curl git ftp lftp wget libarchive-tools \
            ccache python3 zip unzip tar gzip bzip2 rar unrar \
            cpio jq
      
      - name: Install repo tool
        run: |
          mkdir -p ~/bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
          chmod a+x ~/bin/repo
          export PATH=~/bin:$PATH
          repo init -u https://github.com/phhgsi/kernel_manifes.git -b main
          repo sync

      - name: Clone toolchain
        run: |
          git clone --single-branch --depth=1 --no-tags "${{ github.event.inputs.TOOLCHAIN_URL }}" toolchain

      - name: Restore build cache
        id: cache
        uses: actions/cache@v4
        with:
          path: out
          key: kernel-out-${{ runner.os }}-${{ github.sha }}

      - name: Build & package kernel
        run: |
          export PATH="$PWD/toolchain/bin:$PATH"
          OBJDIR="$PWD/out"
          ANYKERNEL_DIR="$PWD/anykernel"
          BASE="${{ github.event.inputs.KERNEL_NAME }}"
          ZIP_NAME="$BASE-$(date +'%d-%m-%Y-%H%M').zip"
          ARCH=arm64

          cd kernel/msm-5.4
          START=$(date +%s)
          make -s O="$OBJDIR" ARCH=$ARCH ${{ github.event.inputs.CONFIG_FILE }} -j$(nproc)
          make O="$OBJDIR" ARCH=$ARCH \
               CC=clang CROSS_COMPILE=aarch64-linux-gnu- \
               CROSS_COMPILE_ARM32=arm-linux-gnueabi- AR=llvm-ar \
               LD=ld.lld NM=llvm-nm OBJCOPY=llvm-objcopy LLVM=1 \
               LLVM_IAS=1 -j$(nproc)

          cd "$OBJDIR"
          if [[ -f arch/arm64/boot/Image && -f arch/arm64/boot/dtbo.img ]]; then
            git clone -q "${{ github.event.inputs.ANYKERNEL }}" "$ANYKERNEL_DIR"
            cp arch/arm64/boot/Image arch/arm64/boot/dtbo.img "$ANYKERNEL_DIR"
            cd "$ANYKERNEL_DIR"
            zip -r AnyKernel.zip *
            mv AnyKernel.zip "$ZIP_NAME"
            mv "$ZIP_NAME" "$PWD/../.."
            echo "BUILD COMPLETE in $(( $(date +%
